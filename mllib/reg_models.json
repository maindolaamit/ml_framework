{
  "decision_tree": {
    "model_name": "DecisionTreeClassifier",
    "model_package": "sklearn.tree.DecisionTreeClassifier",
    "param_grid": {
      "learning_rate": [
        0.05,
        0.10,
        0.15,
        0.20,
        0.25,
        0.30
      ],
      "max_depth": [
        3,
        4,
        5,
        6,
        8,
        10,
        12,
        15
      ],
      "min_child_weight": [
        1,
        3,
        5,
        7
      ],
      "gamma": [
        0.0,
        0.1,
        0.2,
        0.3,
        0.4
      ],
      "colsample_bytree": [
        0.3,
        0.4,
        0.5,
        0.7
      ]
    }
  },
  "svm": {
    "model_name": "SVM",
    "model_package": "sklearn.svm",
    "param_grid":{
            "learning_rate": [0.05, 0.10, 0.15, 0.20, 0.25, 0.30],
            "n_estimators": [0, 50, 100, 500]
        }
  },
  "random_forest": {
    "model_name": "RandomForestClassifier",
    "model_package": "sklearn.ensemble.RandomForestClassifier",
    "param_grid":{"n_estimators": [10, 25], "max_features": [5, 10],
                      "max_depth": [10, 50, null], "bootstrap": [true, false]}
  },
  "lightgbm": {
    "model_name": "LightGBMClassifier",
    "model_package": "lgb.LGBMClassifier",
    "param_grid": {}
  },
  "adaboost": {
    "model_name": "AdaBoostClassifier",
    "model_package": "sklearn.ensemble.AdaBoostClassifier",
    "param_grid": {
            "learning_rate": [0.05, 0.10, 0.15, 0.20, 0.25, 0.30],
            "n_estimators": [0, 50, 100, 500]
        }
  },
  "xgb": {
    "model_name": "XGBClassifier",
    "model_package": "xgboost.XGBClassifier",
    "param_grid": {
            "learning_rate": [0.05, 0.10, 0.15, 0.20, 0.25, 0.30],
            "max_depth": [3, 4, 5, 6, 8, 10, 12, 15],
            "min_child_weight": [1, 3, 5, 7],
            "gamma": [0.0, 0.1, 0.2, 0.3, 0.4],
            "colsample_bytree": [0.3, 0.4, 0.5, 0.7]
        }
  },
  "logistic": {
    "model_name": "LogisticRegression",
    "model_package": "sklearn.linear_model",
    "param_grid": {
            "solver": ["newton-cg", "lbfgs", "liblinear"],
            "penalty": ["l1", "l2"],
            "C": [100, 10, 1, 0.1, 0.01]
        }
  },
  "sgd": {
    "model_name": "SGD",
    "model_package": "sklearn.linear_model",
    "param_grid": {}
  },
  "gradient_boost": {
    "model_name": "RandomForestClassifier",
    "model_package": "sklearn.ensemble.GradientBoostingClassifier",
    "param_grid": {}
  }
}